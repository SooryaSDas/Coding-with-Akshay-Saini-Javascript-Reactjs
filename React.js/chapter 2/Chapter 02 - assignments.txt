1)  What is `NPM`?

	NPM is the worl's largest software registry. The open-source web project developers use it from the entire world to share and borrow packages. The npm also acts as a command-line utility for the node.js project for installing packages in the project, dependency management, and even version management.
3 components of npm : website, command line interface, registry.

2) What is `Parcel/Webpack`? Why do we need it?

	Bundlers are able to perform many more tasks when building a web application like post processing of code or structuring your application for supporting lazy loading.
parcel : bundle all your assests, automatic transforms, zero configuration code splitting, hot module replacement, friendly error loading, minify, file watcher alogorithm, cleaning our code, dev and production build, bundling, image optimization, caching while development, compression, compatable with older version of browsers, https on dev, manage port number, consistent hashing algorithms, zero config bundler

3) What is `.parcel-cache`

	Store information about our poject when parcel builds it, so that when it rebuilds, it doesn't have to re-parse and re-analyze everything from scarch. it's a key reason why parcel can be so fast in development mode.

4)  What is `npx` ?

	NPX Stands for Node Package eXecute. it is simply an npm package runner. it allows developers to execute any javascript package available on the npm registry without even installing it. NPX is installed automatically with npm version.

5)  What is difference between `dependencies` vs `devDependencies`

	Devdependencies are the packages that our project depends on. but dependencies may serve various purposes. for example, you may need a dependecy to build your proeject, another to run it, another to tet it, and so on. 
the dependencies object specifies the packages that you need to run your code, for example react, react-dom.
devdependencies object maps the packages that you will only need during the development of your project. you don't need them to run your code in production, for example, a testing framework.

6) - What is Tree Shaking?

	Tree shaking is a term commonly used within a javascript context to describe the removal of dead code. it relies on the import and export statements to detect if code modules are exported and imported for use between javascript files.

7) What is Hot Module Replacement?

	It exchanges, add or removes modules while an application is running, without a full reload. this is significally speed up development in a few ways: retain application state which is lost during a full reload. save valuable development time by only updating what's changed. 

8) What is `.gitignore`? What should we add and not add into it?

	gitignore file lists all of the files that are local to a project that git should not push to github.

9) What is the difference between `package.json` and `package-lock.json` ?

	The "package.json" file defines the rules required to run your application and install dependencies. On the other hand, the "package-lock.json" file holds detailed information on all the dependencies installed based on the package.json rules.

10) Why should I not modify `package-lock.json`?

	It is a generated file and is not designed to be manually edited. its purpose is to track the entire tree of dependencies (including dependencies of dependencies) and the exact version of each dependency. you should commit package-lock.json to your code repository.

11) What is `node_modules` ? Is it a good idea to push that on git?

	Node modules provide a way to re-use code in your node application. In some ways, they're similar to a class in other language, like C# or java. in many ways, they're completely different from a class. if you've written a nove application, you've used modules, you just may no have known it. 
The default option is here not to commit the node_modules folder, you should instead add it to the .gitignore file.

12) What is the `dist` folder?

	The dist folder is where the compiled code is stored. this is the code that is ready to be deployed to a production environment. the src and dist folders are essential for any software development project. they help to keep the code organized and ensure that the compiled version is always up-to-date.

13) - What is `browserlists`?

	in the javascript world, there is a wonderful library called browserlist. it's a pretty simple idea:browserlist allows you to describe which browser your sited needs to support, in a bunch of useful ways. then any tool that needs this information can read it from a central spot.

14) Read about: ^ - caret and ~ - tilda ? 

	npm uses the tilde(~) and caret(^) to designate which patch and minor version to use repectively. so if you see ~1.0.2 it means to install version 1.0.2 or the latest patch version such as 1.0.4
if you see ^1.0.2 it means to install version 1/0/2 or the latest minor or patch version such as 1.1.0.

15) Read about Script types in html?

	The type attribute of the script element indicates the type of script represented by the element : a classic script, a javascript module, an import map, or a data block.